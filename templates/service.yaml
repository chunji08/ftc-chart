{{- /*
Copyright Fortinet, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: v1
kind: Service
metadata:
  name: {{ include "faas.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- with .Values.service.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- if or .Values.service.annotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.service.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.service.type }}
  {{- with .Values.service.externalIPs }}
  externalIPs: {{ . }}
  {{- end }}
  {{- if ( or ( eq .Values.service.type "LoadBalancer" ) ( eq .Values.service.type "NodePort" )) }}
  externalTrafficPolicy: {{ .Values.service.externalTrafficPolicy | quote }}
  {{- end }}
  {{ if eq .Values.service.type "LoadBalancer" }}
  {{- with .Values.server.service.loadBalancerClass }}
  loadBalancerClass: {{ . }}
  {{- end }}
  {{- if ( and ( eq .Values.service.type "LoadBalancer" ) ( not ( empty .Values.service.loadBalancerIP ))) }}
  loadBalancerIP: {{ .Values.service.loadBalancerIP }}
  {{- end }}
  loadBalancerSourceRanges: 
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if .Values.service.sessionAffinity }}
  sessionAffinity: {{ .Values.service.sessionAffinity }}
  {{- end }}
  {{- if .Values.sessionAffinityConfig }}
  sessionAffinityConfig: {{- include "common.tplvalues.render" ( dict "value" .Values.service.sessionAffinityConfig "context" $) | nindent 4 }}
  {{- end}}
  ports:
    - name: {{ .Values.service.servicePortHttpName }}
      protocol: TCP
      port: {{ .Values.service.servicePortHttp }}
      targetPort: {{ .Values.service.servicePortHttpTargetPort }}
      {{- if eq .Values.service.type "NodePort" }}
      nodePort: {{ .Values.service.nodePortHttp }}
      {{- end }}
    - name: {{ .Values.service.servicePortHttpsName }}
      protocol: TCP
      port: {{ .Values.service.servicePortHttps }}
      targetPort: {{ .Values.service.servicePortHttpsTargetPort }}
      {{- if eq .Values.service.type "NodePort" }}
      nodePort: {{ .Values.service.nodePortHttps }}
      {{- end }}
      {{- with .Values.service.servicePortHttpsAppProtocol }}
      appProtocol: {{ . }}
      {{- end }}
    {{- if .Values.service.extraPorts }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.service.extraPorts "context" $) | nindent 4 }}
    {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.podLabels .Values.commonLabels ) "context" . ) }}
  selector: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 4 }}